package org.example;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class MyTelegramBot extends TelegramLongPollingBot {
    private final ClientStorage clientStorage;

    public MyTelegramBot(ClientStorage clientStorage) {
        this.clientStorage = clientStorage;
    }

    @Override
    public String getBotUsername() {
        return "motivcalendar_bot";
    }

    @Override
    public String getBotToken() {
        return "7599732664:AAHDzKKt5OT2ZUbjdbK1FX7wMFzwuNg1oZ8";
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String chatId = update.getMessage().getChatId().toString();
            String text = update.getMessage().getText();

            if (text.startsWith("–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞") || text.startsWith("/delete")) {
                sendMessage(chatId, "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞, –≤–æ—Å—å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–º–∞–Ω–¥–æ–π \n" +
                        "/delete `–Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞`");
                if (text.startsWith("/delete ")) {
                    String phoneNumber = text.replace("/delete ", "").trim();
                    handleDeleteByPhoneCommand(chatId, phoneNumber);
                }
            } else {
                switch (text) {
                    case "/start":
                        sendCommandMenu(chatId);
                        handleStartCommand(chatId);
                        break;
                    case "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥":
                    case "/help":
                        handleHelpCommand(chatId);
                        break;
                    case "–ö–ª–∏–µ–Ω—Ç—ã":
                    case "/clients":
                        handleListCommand(chatId);
                        break;
                    case "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤":
                    case "/all_delete":
                        handleDeleteAllCommand(chatId);
                        break;
                    default:
                        if (text.startsWith("–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞") || text.startsWith("/add")) {
                            handleAddCommand(chatId, text);
                        } else {
                            handleUnknownCommand(chatId);
                        }
                        break;
                }
            }
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    private void handleAddCommand(String chatId, String text) {
        String[] parts = text.split(" ", 5);
        if (parts.length < 5) {
            sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/add –ò–º—è –¢–µ–ª–µ—Ñ–æ–Ω –£—Å–ª—É–≥–∞ YYYY-MM-DD`");
            return;
        }

        try {
            String name = parts[1];
            String phone = parts[2];
            String service = parts[3];
            String date = parts[4];

            Client client = new Client(name, phone, service, date);
            clientStorage.addClient(client);

            sendMessage(chatId, "‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n" + client);
            clientStorage.saveToFile();
        } catch (IllegalArgumentException e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    // –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
    private void handleListCommand(String chatId) {
        List<Client> clients = clientStorage.getClients();
        if (clients.isEmpty()) {
            sendMessage(chatId, "üì≠ –ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
        } else {
            StringBuilder response = new StringBuilder("üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:\n");
            for (Client client : clients) {
                response.append(client).append("\n");
            }
            sendMessage(chatId, response.toString());
        }
    }

    // –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    private void handleHelpCommand(String chatId) {
        String helpText = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                "/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞\n" +
                "/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n" +
                "/delete - –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É\n" +
                "/allDelete - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n" +
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n" +
                "/start - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥";
        sendMessage(chatId, helpText);
    }

    // /start –∫–æ–º–∞–Ω–¥–∞
    private void handleStartCommand(String chatId) {
        sendMessage(chatId, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:");
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    private void handleUnknownCommand(String chatId) {
        sendMessage(chatId, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.");
    }
    // –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    private void handleDeleteByPhoneCommand(String chatId, String phoneNumber) {
        List<Client> clients = clientStorage.getClients();
        if (clients.isEmpty()) {
            sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç. –£–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ.");
            return;
        }

        // –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        Client clientToRemove = null;
        for (Client client : clients) {
            if (client.getPhoneNumber().equals(phoneNumber)) {
                clientToRemove = client;
                break;
            }
        }

        // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º
        if (clientToRemove != null) {
            clients.remove(clientToRemove);
            sendMessage(chatId, "–ö–ª–∏–µ–Ω—Ç \"" + clientToRemove.getName() + "\" —Å –Ω–æ–º–µ—Ä–æ–º \"" + clientToRemove.getPhoneNumber() + "\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.");
            clientStorage.saveToFile();
        } else {
            sendMessage(chatId, "–ö–ª–∏–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º \"" + phoneNumber + "\" –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }
    }
    // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    private void handleDeleteAllCommand(String chatId) {
        List<Client> clients = clientStorage.getClients();
        if (clients.isEmpty()) {
            sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ —É–∂–µ –ø—É—Å—Ç.");
            return;
        }

        // –û—á–∏—â–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫
        clients.clear();
        clientStorage.saveToFile();
        sendMessage(chatId, "–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.");
    }

    public void sendReminders(String chatId) {
        List<Client> todayClients = clientStorage.getClientsByDate(LocalDate.now());
        if (todayClients.isEmpty()) {
            sendMessage(chatId, "üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ—Ç.");
        } else {
            StringBuilder reminderMessage = new StringBuilder("üìÜ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—ã:\n");
            for (Client client : todayClients) {
                reminderMessage.append("üîπ ").append(client).append("\n");
            }
            sendMessage(chatId, reminderMessage.toString());
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    private void sendMessage(String chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.enableMarkdown(true); // –†–∞–∑—Ä–µ—à–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
    //–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥
    public void sendCommandMenu(String chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:");

        // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        KeyboardRow row1 = new KeyboardRow();
        row1.add("–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞");
        row1.add("–ö–ª–∏–µ–Ω—Ç—ã");

        // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        KeyboardRow row2 = new KeyboardRow();
        row2.add("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥");
        row2.add("–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞");

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboardRows.add(row1);
        keyboardRows.add(row2);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
